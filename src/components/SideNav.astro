---
import type { Folder } from "../models/Folder";
const { folders } = Astro.props;
const safeFolders = folders || [];
---
<div class="bg-primary-700 h-full w-64 overflow-x-hidden pt-5">
    {folders&&
        safeFolders.map((item : Folder,index: number) => (
        <ul class="ml-5" set:html={'<li class="flex flex-col " >'+item.generateFolderHTML()+'</li>'}>
        </ul>
        ))
    }
    {
        !folders&&
        <ul>
            <li class="flex flex-col ml-10 space-x-2 p-2">
                <p class="text-primary-300">No folders found</p>
            </li>
        </ul>
    }
    
</div>
<div id="folderPassthrough" class="hidden">
    {safeFolders?JSON.stringify(safeFolders):''
    }

</div>
<script>
import { Folder } from "../models/Folder";
import { findFolderByKey } from "../utils/helper";

const folderPassthrough = document.getElementById('folderPassthrough') as HTMLDivElement||document.createElement('div').classList.add('hidden');
const safeFolders = JSON.parse(folderPassthrough.innerHTML) as Array<Folder>;
function delay(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
document.querySelectorAll('button[aria-label]').forEach(button => {
    
    button.addEventListener('click', (event) => {
        const target = event.target as HTMLElement;
        let folder =findFolderByKey(safeFolders,target?.getAttribute('aria-label'));
        
        if(target){
            if (target?.getAttribute('aria-label') === folder.key) {
                const childrenLists = Array.from(target.parentNode?.parentElement?.children || []).filter(child => child.tagName === 'UL' && child.parentElement === target.parentNode?.parentElement) as HTMLUListElement[];
                if(childrenLists.length>0){
                    childrenLists.forEach(async (list) => {                        
                        if(list.classList.contains('hidden')){
                            list.classList.toggle('slide-in-from-top');
                            list.classList.toggle('slide-out-to-top');
                            await delay(200)
                            list.classList.replace('hidden','flex');
                        }else{
                            list.classList.toggle('slide-out-to-top');
                            list.classList.toggle('slide-in-from-top');
                            await delay(200);
                            list.classList.replace('flex','hidden');
                        }
                    });
                }
            }
        }

    });
});
</script>